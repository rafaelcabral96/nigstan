row2 <- 1
for(i in 1:length(type.seq)){
for(j in 1:length(iter)){
for(k in 1:length(fit.seq)){
data <- tryCatch(readRDS(paste0("data/type ", type.seq[i], " dataset ", iter[j], " n ", n, " fit", fit.seq[k],".rds")),
error = function(e) NULL)
if(is.null(data)) next
crps <- numeric(length(data$pred.true))
scrps <- numeric(length(data$pred.true))
mae  <- numeric(length(data$pred.true))
logS  <- numeric(length(data$pred.true))
for(l in 1:(length(data$pred.true))){
datal   <- data$wmatpred[1000:10000,l]
logS[l] <- sum(dnorm(datal, mean=data$pred.true[l], sd = 0.7, log = TRUE))
datal   <- datal + rnorm(9000, sd = 0.7)
m2      <- mean( abs(sample(datal)-sample(datal)) )
mae[l]  <- mean(abs(datal-data$pred.true[l]))
crps[l] <- mae[l] - 0.5*m2
scrps[l]<- mae[l]/m2 + 0.5*log(m2)
mae[l]  <- mean((datal-data$pred.true[l])^2)
}
#mean of crps
crps.mean <- mean(crps)
scrps.mean <- mean(scrps)
mae.mean  <- mean(mae)
logS.mean <- mean(logS)
mat[row,] <- c(type.seq[i],iter[j],fit.seq[k], mae.mean, crps.mean, scrps.mean, logS.mean)
if(k>1){
mat2[row2,] <-  c(type.seq[i],iter[j],fit.seq[k], mean(data$etavec[1000:10000]))
row2 <- row2 + 1
}
row <- row + 1
}
}
}
t = "gauss"
s = "SCRPS"
score.avg1 <- numeric(230)
score.avg2 <- numeric(230)
score.avg3 <- numeric(230)
for(i in 1:230){
scores <- mat[(mat$datatype == t) & (mat$iteration == i), s]
score.avg1[i] <- scores[2]/scores[1] #PC to GAUSS
score.avg2[i] <- scores[2]/scores[3] #PC to UNI
score.avg3[i] <- scores[3]/scores[1] #Uni to GAUSS
}
t = "gauss"
s = "SCRPS"
score.avg1 <- numeric(230)
score.avg2 <- numeric(230)
score.avg3 <- numeric(230)
for(i in 1:230){
scores <- mat[(mat$datatype == t) & (mat$iteration == i), s]
score.avg1[i] <- scores[2]/scores[1] #PC to GAUSS
score.avg2[i] <- scores[2]/scores[3] #PC to UNI
score.avg3[i] <- scores[3]/scores[1] #Uni to GAUSS
}
mat
mat <- as.numeric(mat)
t = "gauss"
s = "SCRPS"
score.avg1 <- numeric(230)
score.avg2 <- numeric(230)
score.avg3 <- numeric(230)
for(i in 1:230){
scores <- mat[(mat$datatype == t) & (mat$iteration == i), s]
score.avg1[i] <- scores[2]/scores[1] #PC to GAUSS
score.avg2[i] <- scores[2]/scores[3] #PC to UNI
score.avg3[i] <- scores[3]/scores[1] #Uni to GAUSS
}
scores
scores <- mat[(mat$datatype == t) & (mat$iteration == i), s]
mat
type.seq = c("gauss","nig")
dataset = 1
n = 100
fit.seq = c(1,2,3)
iter <- seq(1,230)
mat <- matrix(NA, nrow = length(type.seq)*length(iter)*length(fit.seq), ncol = 7)
mat2 <- matrix(NA, nrow = length(type.seq)*length(iter)*(length(fit.seq)-1), ncol = 4)
row  <- 1
row2 <- 1
for(i in 1:length(type.seq)){
for(j in 1:length(iter)){
for(k in 1:length(fit.seq)){
data <- tryCatch(readRDS(paste0("data/type ", type.seq[i], " dataset ", iter[j], " n ", n, " fit", fit.seq[k],".rds")),
error = function(e) NULL)
if(is.null(data)) next
crps <- numeric(length(data$pred.true))
scrps <- numeric(length(data$pred.true))
mae  <- numeric(length(data$pred.true))
logS  <- numeric(length(data$pred.true))
for(l in 1:(length(data$pred.true))){
datal   <- data$wmatpred[1000:10000,l]
logS[l] <- sum(dnorm(datal, mean=data$pred.true[l], sd = 0.7, log = TRUE))
datal   <- datal + rnorm(9000, sd = 0.7)
m2      <- mean( abs(sample(datal)-sample(datal)) )
mae[l]  <- mean(abs(datal-data$pred.true[l]))
crps[l] <- mae[l] - 0.5*m2
scrps[l]<- mae[l]/m2 + 0.5*log(m2)
mae[l]  <- mean((datal-data$pred.true[l])^2)
}
#mean of crps
crps.mean <- mean(crps)
scrps.mean <- mean(scrps)
mae.mean  <- mean(mae)
logS.mean <- mean(logS)
mat[row,] <- c(type.seq[i],iter[j],fit.seq[k], mae.mean, crps.mean, scrps.mean, logS.mean)
if(k>1){
mat2[row2,] <-  c(type.seq[i],iter[j],fit.seq[k], mean(data$etavec[1000:10000]))
row2 <- row2 + 1
}
row <- row + 1
}
}
}
mat <- as.data.frame(mat)
mat <- na.omit(mat)
colnames(mat) <- c("datatype", "iteration","fittype", "MAE", "CRPS","SCRPS","logS")
mat$MAE   <- as.numeric(mat$MAE)
mat$CRPS  <- as.numeric(mat$CRPS)
mat$SCRPS <- as.numeric(mat$SCRPS)
mat$logS  <- as.numeric(mat$logS)
aggregate(logS ~ fittype, data = mat, mean)
aggregate(MAE ~  fittype, data = mat, mean)
maty
mat
aggregate(logS ~ fittype + datatype, data = mat, mean)
aggregate(logS ~ fittype + datatype, data = mat, mean)
aggregate(MAE ~  fittype + datatype, data = mat, mean)
aggregate(logS ~ fittype + datatype, data = mat, mean)
aggregate(MAE ~  fittype + datatype, data = mat, mean)
aggregate(logS ~ fittype + datatype, data = mat, mean)
aggregate(MAE ~  fittype + datatype, data = mat, mean)
aggregate(MAE ~  fittype + datatype, data = mat, mean)
aggregate(logS ~ fittype + datatype, data = mat, mean)
aggregate(MAE ~  fittype + datatype, data = mat, mean)
mat <- as.data.frame(mat)
mat <- na.omit(mat)
colnames(mat) <- c("datatype", "iteration","fittype", "MAE", "CRPS","SCRPS","logS")
mat$MAE   <- as.numeric(mat$MAE)
mat$CRPS  <- as.numeric(mat$CRPS)
mat$SCRPS <- as.numeric(mat$SCRPS)
mat$logS  <- as.numeric(mat$logS)
mat2 <- as.data.frame(mat2)
mat2 <- na.omit(mat2)
colnames(mat2) <- c("datatype", "iteration","fittype", "etamean")
mat2$etamean  <- as.numeric(mat2$etamean)
matG <- mat[mat$datatype=="nig",]
best.mae   <- numeric(230)
best.scrps <- numeric(230)
best.logS  <- numeric(230)
for(i in 1:230){
best.mae[i]   <- which.min(matG[matG$iteration==i,]$MAE)
best.scrps[i] <- which.min(matG[matG$iteration==i,]$SCRPS)
best.logS[i]  <- which.min(matG[matG$iteration==i,]$logS)
}
best.scrps[best.scrps == 1] <- "Gauss"
best.scrps[best.scrps == 2] <- "NIG PC"
best.scrps[best.scrps == 3] <- "NIG Uni"
best.mae[best.mae == 1] <- "Gauss"
best.mae[best.mae == 2] <- "NIG PC"
best.mae[best.mae == 3] <- "NIG Uni"
ggplot(data = data.frame(best = best.scrps), aes(best)) + geom_bar() + ggtitle("Count of lowest SCRPS for NIG data")
library(ggplot2)
ggplot(data = data.frame(best = best.scrps), aes(best)) + geom_bar() + ggtitle("Count of lowest SCRPS for NIG data")
ggplot(data = data.frame(best = best.mae), aes(best)) + geom_bar() + ggtitle("Count of lowest MAE for NIG data")
mat <- as.data.frame(mat)
mat <- na.omit(mat)
colnames(mat) <- c("datatype", "iteration","fittype", "MAE", "CRPS","SCRPS","logS")
mat$MAE   <- as.numeric(mat$MAE)
mat$CRPS  <- as.numeric(mat$CRPS)
mat$SCRPS <- as.numeric(mat$SCRPS)
mat$logS  <- as.numeric(mat$logS)
aggregate(logS ~ fittype + datatype, data = mat, mean)
aggregate(MAE ~  fittype + datatype, data = mat, mean)
ggplot(data = data.frame(best = best.mae), aes(best)) + geom_bar() + ggtitle("Count of lowest MAE for NIG data")
ggplot(data = data.frame(best = best.scrps), aes(best)) + geom_bar() + ggtitle("Count of lowest SCRPS for NIG data")
ggplot(data = data.frame(best = best.mae), aes(best)) + geom_bar() + ggtitle("Count of lowest MAE for NIG data")
ggplot(data = data.frame(best = best.scrps), aes(best)) + geom_bar() + ggtitle("Count of lowest SCRPS for NIG data")
ggplot(data = data.frame(best = best.mae), aes(best)) + geom_bar() + ggtitle("Count of lowest MAE for NIG data")
ggplot(data = data.frame(best = best.logS), aes(best)) + geom_bar() + ggtitle("Count of lowest SCRPS for NIG data")
ggplot(data = data.frame(best = best.logS), aes(best)) + geom_bar() + ggtitle("Count of lowest SCRPS for NIG data")
ggplot(data = data.frame(best = best.mae), aes(best)) + geom_bar() + ggtitle("Count of lowest MAE for NIG data")
ggplot(data = data.frame(best = best.SCRPS), aes(best)) + geom_bar() + ggtitle("Count of lowest SCRPS for NIG data")
ggplot(data = data.frame(best = best.SCRPS), aes(best)) + geom_bar() + ggtitle("Count of lowest SCRPS for NIG data")
ggplot(data = data.frame(best = best.scrps), aes(best)) + geom_bar() + ggtitle("Count of lowest SCRPS for NIG data")
ggplot(data = data.frame(best = best.mae), aes(best)) + geom_bar() + ggtitle("Count of lowest MAE for NIG data")
t = "gauss"
s = "SCRPS"
score.avg1 <- numeric(230)
score.avg2 <- numeric(230)
score.avg3 <- numeric(230)
for(i in 1:230){
scores <- mat[(mat$datatype == t) & (mat$iteration == i), s]
score.avg1[i] <- scores[2]/scores[1] #PC to GAUSS
score.avg2[i] <- scores[2]/scores[3] #PC to UNI
score.avg3[i] <- scores[3]/scores[1] #Uni to GAUSS
}
mean(score.avg1)
mean(score.avg2)
mean(score.avg3)
t = "gauss"
s = "SCRPS"
score.avg1 <- numeric(230)
score.avg2 <- numeric(230)
score.avg3 <- numeric(230)
for(i in 1:230){
scores <- mat[(mat$datatype == t) & (mat$iteration == i), s]
score.avg1[i] <- scores[2]/scores[1] #PC to GAUSS
score.avg2[i] <- scores[2]/scores[3] #PC to UNI
score.avg3[i] <- scores[3]/scores[1] #Uni to GAUSS
}
mean(score.avg1)
mean(score.avg2)
mean(score.avg3)
t = "gauss"
s = "MAE"
score.avg1 <- numeric(230)
score.avg2 <- numeric(230)
score.avg3 <- numeric(230)
for(i in 1:230){
scores <- mat[(mat$datatype == t) & (mat$iteration == i), s]
score.avg1[i] <- scores[2]/scores[1] #PC to GAUSS
score.avg2[i] <- scores[2]/scores[3] #PC to UNI
score.avg3[i] <- scores[3]/scores[1] #Uni to GAUSS
}
mean(score.avg1)
mean(score.avg2)
mean(score.avg3)
type.seq = c("gauss","nig")
dataset = 1
n = 100
fit.seq = c(1,2,3)
iter <- seq(1,230)
mat <- matrix(NA, nrow = length(type.seq)*length(iter)*length(fit.seq), ncol = 5)
mat2 <- matrix(NA, nrow = length(type.seq)*length(iter)*(length(fit.seq)-1), ncol = 4)
row  <- 1
row2 <- 1
for(i in 1:length(type.seq)){
for(j in 1:length(iter)){
for(k in 1:length(fit.seq)){
data <- tryCatch(readRDS(paste0("data/type ", type.seq[i], " dataset ", iter[j], " n ", n, " fit", fit.seq[k],".rds")),
error = function(e) NULL)
if(is.null(data)) next
crps <- numeric(length(data$pred.true))
scrps <- numeric(length(data$pred.true))
mae  <- numeric(length(data$pred.true))
logS  <- numeric(length(data$pred.true))
for(l in 1:(length(data$pred.true))){
datal   <- data$wmatpred[1000:10000,l]
logS[l] <- sum(dnorm(datal, mean=data$pred.true[l], sd = 0.7, log = TRUE))
datal   <- datal + rnorm(9000, sd = 0.7)
mae[l]  <- mean(abs(datal-data$pred.true[l]))
}
mae.mean  <- mean(mae)
logS.mean <- mean(logS)
mat[row,] <- c(type.seq[i],iter[j],fit.seq[k], mae.mean,logS.mean)
if(k>1){
mat2[row2,] <-  c(type.seq[i],iter[j],fit.seq[k], mean(data$etavec[1000:10000]))
row2 <- row2 + 1
}
row <- row + 1
}
}
}
mat <- as.data.frame(mat)
mat <- na.omit(mat)
colnames(mat) <- c("datatype", "iteration","fittype", "MAE","logS")
mat$MAE   <- as.numeric(mat$MAE)
mat$CRPS  <- as.numeric(mat$CRPS)
mat$SCRPS <- as.numeric(mat$SCRPS)
mat$logS  <- as.numeric(mat$logS)
t = "gauss"
s = "MAE" #or logS
score.avg1 <- numeric(230)
score.avg2 <- numeric(230)
score.avg3 <- numeric(230)
for(i in 1:230){
scores <- mat[(mat$datatype == t) & (mat$iteration == i), s]
score.avg1[i] <- scores[2]/scores[1] #PC to GAUSS
score.avg2[i] <- scores[2]/scores[3] #PC to UNI
score.avg3[i] <- scores[3]/scores[1] #Uni to GAUSS
}
mean(score.avg1)
mean(score.avg2)
mean(score.avg3)
type.seq = c("gauss","nig")
dataset = 1
n = 100
fit.seq = c(1,2,3)
iter <- seq(1,230)
mat <- matrix(NA, nrow = length(type.seq)*length(iter)*length(fit.seq), ncol = 6)
mat2 <- matrix(NA, nrow = length(type.seq)*length(iter)*(length(fit.seq)-1), ncol = 4)
row  <- 1
row2 <- 1
for(i in 1:length(type.seq)){
for(j in 1:length(iter)){
for(k in 1:length(fit.seq)){
data <- tryCatch(readRDS(paste0("data/type ", type.seq[i], " dataset ", iter[j], " n ", n, " fit", fit.seq[k],".rds")),
error = function(e) NULL)
if(is.null(data)) next
crps <- numeric(length(data$pred.true))
mae  <- numeric(length(data$pred.true))
logS  <- numeric(length(data$pred.true))
for(l in 1:(length(data$pred.true))){
datal   <- data$wmatpred[1000:10000,l]
logS[l] <- sum(dnorm(datal, mean=data$pred.true[l], sd = 0.7, log = TRUE))
datal   <- datal + rnorm(9000, sd = 0.7)
m2      <- mean( abs(sample(datal)-sample(datal)) )
mae[l]  <- mean(abs(datal-data$pred.true[l]))
crps[l] <- mae[l] - 0.5*m2
mae[l]  <- mean((datal-data$pred.true[l])^2)
}
#mean of crps
crps.mean <- mean(crps)
scrps.mean <- mean(scrps)
mae.mean  <- mean(mae)
logS.mean <- mean(logS)
mat[row,] <- c(type.seq[i],iter[j],fit.seq[k], mae.mean, crps.mean, logS.mean)
if(k>1){
mat2[row2,] <-  c(type.seq[i],iter[j],fit.seq[k], mean(data$etavec[1000:10000]))
row2 <- row2 + 1
}
row <- row + 1
}
}
}
mat <- as.data.frame(mat)
mat <- na.omit(mat)
colnames(mat) <- c("datatype", "iteration","fittype", "MAE", "CRPS","SCRPS","logS")
mat$MAE   <- as.numeric(mat$MAE)
mat$CRPS  <- as.numeric(mat$CRPS)
mat$SCRPS <- as.numeric(mat$SCRPS)
mat$logS  <- as.numeric(mat$logS)
t = "gauss"
s = "MAE" #or logS
score.avg1 <- numeric(230)
score.avg2 <- numeric(230)
score.avg3 <- numeric(230)
for(i in 1:230){
scores <- mat[(mat$datatype == t) & (mat$iteration == i), s]
score.avg1[i] <- scores[2]/scores[1] #PC to GAUSS
score.avg2[i] <- scores[2]/scores[3] #PC to UNI
score.avg3[i] <- scores[3]/scores[1] #Uni to GAUSS
}
mean(score.avg1)
mean(score.avg2)
mean(score.avg3)
#fittype = 1 - Gaussian model
#fittype datatype      MAE
#1       1    gauss 3.287400
#2       2    gauss 3.319804
#3       3    gauss 3.507372
#4       1      nig 3.371103
#5       2      nig 3.169910
#6       3      nig 3.226032
setwd("C:/Users/Rafael Cabral/Desktop/KAUST/PhD/Papers/PC priors for non.-Gaussian models/publication/BA version 2/code/Simulations in Response to Reviewers")
type.seq = c("gauss","nig")
dataset = 1
type.seq = c("gauss","nig")
dataset = 1
n = 100
fit.seq = c(1,2,3)
iter <- seq(1,230)
mat <- matrix(NA, nrow = length(type.seq)*length(iter)*length(fit.seq), ncol = 6)
mat2 <- matrix(NA, nrow = length(type.seq)*length(iter)*(length(fit.seq)-1), ncol = 4)
row  <- 1
row2 <- 1
for(i in 1:length(type.seq)){
for(j in 1:length(iter)){
for(k in 1:length(fit.seq)){
data <- tryCatch(readRDS(paste0("data/type ", type.seq[i], " dataset ", iter[j], " n ", n, " fit", fit.seq[k],".rds")),
error = function(e) NULL)
if(is.null(data)) next
crps <- numeric(length(data$pred.true))
mae  <- numeric(length(data$pred.true))
logS  <- numeric(length(data$pred.true))
for(l in 1:(length(data$pred.true))){
datal   <- data$wmatpred[1000:10000,l]
logS[l] <- sum(dnorm(datal, mean=data$pred.true[l], sd = 0.7, log = TRUE))
datal   <- datal + rnorm(9000, sd = 0.7)
m2      <- mean( abs(sample(datal)-sample(datal)) )
mae[l]  <- mean(abs(datal-data$pred.true[l]))
crps[l] <- mae[l] - 0.5*m2
mae[l]  <- mean((datal-data$pred.true[l])^2)
}
#mean of crps
crps.mean <- mean(crps)
scrps.mean <- mean(scrps)
mae.mean  <- mean(mae)
logS.mean <- mean(logS)
mat[row,] <- c(type.seq[i],iter[j],fit.seq[k], mae.mean, crps.mean, logS.mean)
if(k>1){
mat2[row2,] <-  c(type.seq[i],iter[j],fit.seq[k], mean(data$etavec[1000:10000]))
row2 <- row2 + 1
}
row <- row + 1
}
}
}
type.seq = c("gauss","nig")
dataset = 1
n = 100
fit.seq = c(1,2,3)
iter <- seq(1,230)
mat <- matrix(NA, nrow = length(type.seq)*length(iter)*length(fit.seq), ncol = 6)
mat2 <- matrix(NA, nrow = length(type.seq)*length(iter)*(length(fit.seq)-1), ncol = 4)
row  <- 1
row2 <- 1
for(i in 1:length(type.seq)){
for(j in 1:length(iter)){
for(k in 1:length(fit.seq)){
data <- tryCatch(readRDS(paste0("data/type ", type.seq[i], " dataset ", iter[j], " n ", n, " fit", fit.seq[k],".rds")),
error = function(e) NULL)
if(is.null(data)) next
crps <- numeric(length(data$pred.true))
mae  <- numeric(length(data$pred.true))
logS  <- numeric(length(data$pred.true))
for(l in 1:(length(data$pred.true))){
datal   <- data$wmatpred[1000:10000,l]
logS[l] <- sum(dnorm(datal, mean=data$pred.true[l], sd = 0.7, log = TRUE))
datal   <- datal + rnorm(9000, sd = 0.7)
m2      <- mean( abs(sample(datal)-sample(datal)) )
mae[l]  <- mean(abs(datal-data$pred.true[l]))
crps[l] <- mae[l] - 0.5*m2
mae[l]  <- mean((datal-data$pred.true[l])^2)
}
#mean of crps
crps.mean <- mean(crps)
mae.mean  <- mean(mae)
logS.mean <- mean(logS)
mat[row,] <- c(type.seq[i],iter[j],fit.seq[k], mae.mean, crps.mean, logS.mean)
if(k>1){
mat2[row2,] <-  c(type.seq[i],iter[j],fit.seq[k], mean(data$etavec[1000:10000]))
row2 <- row2 + 1
}
row <- row + 1
}
}
}
mat <- as.data.frame(mat)
mat <- na.omit(mat)
colnames(mat) <- c("datatype", "iteration","fittype", "MAE", "CRPS","logS")
mat$MAE   <- as.numeric(mat$MAE)
mat$CRPS  <- as.numeric(mat$CRPS)
mat$SCRPS <- as.numeric(mat$SCRPS)
mat$logS  <- as.numeric(mat$logS)
t = "gauss"
s = "MAE" #or logS
score.avg1 <- numeric(230)
score.avg2 <- numeric(230)
score.avg3 <- numeric(230)
for(i in 1:230){
scores <- mat[(mat$datatype == t) & (mat$iteration == i), s]
score.avg1[i] <- scores[2]/scores[1] #PC to GAUSS
score.avg2[i] <- scores[2]/scores[3] #PC to UNI
score.avg3[i] <- scores[3]/scores[1] #Uni to GAUSS
}
mean(score.avg1)
mean(score.avg2)
mean(score.avg3)
s = "logS" #or logS or CRPS
score.avg1 <- numeric(230)
score.avg2 <- numeric(230)
score.avg3 <- numeric(230)
for(i in 1:230){
scores <- mat[(mat$datatype == t) & (mat$iteration == i), s]
score.avg1[i] <- scores[2]/scores[1] #PC to GAUSS
score.avg2[i] <- scores[2]/scores[3] #PC to UNI
score.avg3[i] <- scores[3]/scores[1] #Uni to GAUSS
}
mean(score.avg1)
mean(score.avg2)
mean(score.avg3)
t = "gauss"
s = "logS" #or logS or CRPS
score.avg1 <- numeric(230)
score.avg2 <- numeric(230)
score.avg3 <- numeric(230)
for(i in 1:230){
scores <- mat[(mat$datatype == t) & (mat$iteration == i), s]
score.avg1[i] <- scores[2]/scores[1] #PC to GAUSS
score.avg2[i] <- scores[2]/scores[3] #PC to UNI
score.avg3[i] <- scores[3]/scores[1] #Uni to GAUSS
}
mean(score.avg1)
mean(score.avg2)
mean(score.avg3)
rstudioapi::executeCommand('closeProject')
bookdown::render_book("index.Rmd", "bookdown::gitbook")
setwd("C:/Users/Rafael Cabral/Desktop/KAUST/PhD/Papers/Others/Efficient STAN implementation/EILNIGS")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
rmarkdown::render_site()
bookdown::render_book()
install.packages("distill")
The fit was successful with no warning messages. The parameter $\eta^\star$ is quite large (posterior mean of 48) indicating a clear heavy-tailed behavior for the noise, while the parameter $\zeta^\star$ was close to 0, suggesting no need for an asymmetric distribution for the noise.
```{r}
fit_NIG <- readRDS("files/fits/ARNIG2.rds")
knitr::kable(head(fit_NIG$summary(), 6), "simple", row.names = NA, digits=2)
```
library(spdep)                # Columbus dataset
library(rgdal)                # Read polygon data
library(leaflet)              # Interactive widgets
library(leaflet.extras)       # Fullscreen control for Leaflet widget
library(cmdstanr)             # CmdStan R interface
library(posterior)            # Process the output of cmdstanr sampling
source("files/utils.R")       # Several utility functions
fit_Gauss <- readRDS("files/Gauss_fit.rds")
knitr::kable(head(fit_Gauss$summary(),6), "simple", row.names = NA, digits=2)
fit_NIG <- readRDS("files/NIG_columbus.rds")
knitr::kable(head(fit_NIG$summary(),8), "simple", row.names = NA, digits=2)
